///////////////////////////////////////////////////////////////////////////////
//
// MoleculeType Class definition
//
///////////////////////////////////////////////////////////////////////////////
#ifndef _SIMULA_MOLECULE_TYPE_DEFINE_
#define _SIMULA_MOLECULE_TYPE_DEFINE_

#include "global.h"

///////////////////////////////////////////////////////////////////////////////
// project namespace
namespace simula {
	
	// struct simOneBond {
	// 	 simF1 energy;
	// 	 simI1 target;
	// 	 std::vector<simI3> rpos;
	// };
	// typedef std::vector<simOneBond> simBonds;

	///////////////////////////////////////////////////////////////////////////////
	// Store molecule type information
	class MoleculeType {
	public:
		struct core_t {
			simI1   idx_def; //! defined index by user
			simSize idx_gen; //! generated index (count from 1)
			simSize eva_num; //! total evaporation number
			simSize dot_num; //! dot number
			simI3*  dot_pos = NULL; //! dot positions

		};
	private:
		MoleculeType::core_t m_core; //! core data for CUDA API
		simString m_name;            //! type name in string
	public:

		// cleaning heap memory
		inline void clean() {
#ifndef NDEBUG
			cout << " cleaning molecule type " << m_name << endl;
#endif
			if (m_core.dot_pos) { delete[] m_core.dot_pos; }
		}

		///////////////////////////////////////////////////////////////////////////////
		// Getters
		// get all core data
		inline const core_t     core() const { return m_core; }
		// get type name in string
		inline const simString  name() const { return m_name; }
		// get type reference index defined by user
		inline const simI1   idx_def() const { return m_core.idx_def; }
		// get type index generated by program
		inline const simSize idx_gen() const { return m_core.idx_gen; }
		// get type total amount
		inline const simSize eva_num() const { return m_core.eva_num; }
		// get total number of components (dots)
		inline const simSize dot_num() const { return m_core.dot_num; }
		// get vector containing component point positions
		inline const simI3*  dot_pos() const { return m_core.dot_pos; }

		///////////////////////////////////////////////////////////////////////////////
		// Setters
		// set type name
		inline void set_name(const simString& v) { m_name = v;  }
		// set type index
		inline void set_idx_def(const simI1   v) { m_core.idx_def = v; }
		// set type index
		inline void set_idx_gen(const simSize v) { m_core.idx_gen = v; }
		// set type amount
		inline void set_eva_num(const simSize v) { m_core.eva_num = v; }

		// set relative component position with a list of integer pairs
		void set_dot_pos(const simVI3& v);
		void set_dot_pos(const simSize size, const simI3* value);

#ifndef NDEBUG
		// debug function
		void debug();
#endif

	};
};

#endif // _SIMULA_MOLECULE_TYPE_DEFINE_
